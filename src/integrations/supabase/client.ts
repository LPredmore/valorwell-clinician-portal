
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://gqlkritspnhjxfejvgfg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdxbGtyaXRzcG5oanhmZWp2Z2ZnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NjQ0NDUsImV4cCI6MjA1ODM0MDQ0NX0.BtnTfcjvHI55_fs_zor9ffQ9Aclg28RSfvgZrWpMuYs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

export const getOrCreateVideoRoom = async (appointmentId: string, force: boolean = false): Promise<{ success: boolean, url: string | null, error: any | null }> => {
  try {
    // Note: The 'daily-video' edge function does not exist yet. 
    // I will create it in a subsequent step.
    const { data, error } = await supabase.functions.invoke('daily-video', {
      body: { appointmentId, force },
    });

    if (error) {
      throw error;
    }

    if (data.error) {
      throw new Error(data.error);
    }

    if (!data.url) {
        throw new Error("Video room URL not returned from function.");
    }
    
    return { success: true, url: data.url, error: null };
  } catch (error: any) {
    console.error('Error getting or creating video room:', error);
    return { success: false, url: null, error };
  }
};

// Basic user creation function
export const createUser = async (email: string, userData: any) => {
    console.log("`createUser` called with:", { email, userData });
    try {
        // Call the create-user edge function
        const { data, error } = await supabase.functions.invoke('create-user', {
            body: { email, ...userData }
        });
        
        if (error) {
            throw error;
        }
        
        return { data, error: null };
    } catch (error: any) {
        console.error("Error in createUser:", error);
        return { data: null, error };
    }
};
